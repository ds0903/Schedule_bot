import asyncio

from aiogram import F, Router, html, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (FSInputFile, KeyboardButton, Message,
                           ReplyKeyboardMarkup)
from handlers.logic import insert_data, search_data

router = Router()

login = 0


class Form(StatesGroup):
    register = State()
    login = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):

    text = "–ü—Ä–∏–≤—ñ—Ç, —è –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ –∞–±–∏ —Ç–∏ —Ä–æ–∑—ñ–±—Ä–∞–≤—Å—è –∑ –ø–æ—à—É–∫–æ–º –∑–∞–º—ñ–Ω."

    await message.answer(text)
    await asyncio.sleep(1)
    await cmd_menu(message)


@router.message(lambda message: message.text == "–ú–µ–Ω—é")
async def cmd_menu(message: types.Message):
    text1 = "–ë—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –¥—ñ—é"
    kb = [
        [KeyboardButton(text="–í—Ö—ñ–¥")],
        [KeyboardButton(text="–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")],
        [KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.reply(text1, reply_markup=keyboard)


@router.message(lambda message: message.text == "–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É")
async def cmd_vibir_group(message: types.Message):
    text1 = "–ë—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –≥—Ä—É–ø—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é"
    kb = [
        [KeyboardButton(text="–†–ü–ó-48")],
        [KeyboardButton(text="–†–ü–ó-49")],
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.reply(text1, reply_markup=keyboard)


@router.message(lambda message: message.text == "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
async def cmd_register(message: types.Message, state: FSMContext):
    text = "–ë—É–¥—å–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å email —Ç–∞ –ø–∞—Ä–æ–ª—å\n–ü—Ä–∏–∫–ª–∞–¥: test@example.com 12345678"
    await message.reply(text, reply_markup=types.ReplyKeyboardRemove())
    kb = [
        [KeyboardButton(text="–¢–∞–∫, –≤—ñ—Ä–Ω–æ")],
        [KeyboardButton(text="–ù—ñ, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ")],
        [KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await state.set_state(Form.register)

    @router.message(Form.register)
    async def extract_data(message: types.Message):

        try:
            text = message.text.split()
            email, password = text
            if len(text) != 2:
                asyncio.sleep(1)
                await cmd_menu(message)
                await message.reply("–ù–µ–ø—Ä–∞—Ü–∏–≤–ª–∏–π–Ω–∏–π –≤–≤—ñ–¥")

            else:
                text = (email, password)
                await message.answer(
                    f"–ß–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\nE-mail: {email}\n–ü–∞—Ä–æ–ª—å: {password}",
                    reply_markup=keyboard,
                )

        except ValueError:
            await message.reply("–ù–µ–ø—Ä–∞—Ü–∏–≤–ª–∏–π–Ω–∏–π –≤–≤—ñ–¥")

        @router.message(lambda message: message.text == "–¢–∞–∫, –≤—ñ—Ä–Ω–æ")
        async def insert_info(message: types.Message):
            global login
            sho = await insert_data(text)
            await message.answer(sho)
            login = 1
            asyncio.sleep(2)
            await cmd_vibir_group(message)

        await state.clear()


@router.message(lambda message: message.text == "–í—Ö—ñ–¥")
async def cmd_vhid(message: types.Message, state: FSMContext):

    text = "–ë—É–¥—å–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å email —Ç–∞ –ø–∞—Ä–æ–ª—å\n–ü—Ä–∏–∫–ª–∞–¥: test@example.com 12345678"
    await message.reply(text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.login)

    @router.message(Form.login)
    async def cmd_login(message: types.Message):
        data = message.text.split()
        email, password = await search_data(data)
        global login
        if email and password:
            await message.answer("üëæ")
            await message.answer(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ \n–ü–æ—á—Ç–∞: {email}\n–ü–∞—Ä–æ–ª—å: {password}"
            )
            await state.clear()
            login = 1
            asyncio.sleep(2)
            await cmd_vibir_group(message)
        else:
            await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            await cmd_menu(message)
            await state.clear()


@router.message(lambda message: message.text == "–î–æ–ø–æ–º–æ–≥–∞")
async def cmd_dopomoga(message: types.Message):

    text = str(
        "–í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–æ —Ä–æ–∑—Ä–æ–∑–±–Ω–∏–∫–∞ @ds0903",
    )
    await message.reply(text, reply_markup=types.ReplyKeyboardRemove())
    kb = [
        [KeyboardButton(text="–ú–µ–Ω—é")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await asyncio.sleep(2)
    await message.answer("–∞–±–æ–∂ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é", reply_markup=keyboard)


@router.message(lambda message: message.text == "–†–ü–ó-48")
async def cmd_rpz_48(message: types.Message):
    file_ids = []
    global login
    if login == 1:
        image_from_pc = FSInputFile("bot/handlers/photos/photo_2024-05-28_16-52-21.jpg")
        result = await message.answer_photo(
            image_from_pc, caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
        )
        file_ids.append(result.photo[-1].file_id)
        await message.answer("–†–ü–ó-48")
    else:
        await message.answer("–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
        asyncio.sleep(1)
        await cmd_menu(message)


@router.message(lambda message: message.text == "–†–ü–ó-49")
async def cmd_rpz_49(message: types.Message):

    await message.answer("–†–ü–ó-48")
